(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{209:function(t,s,a){"use strict";a.r(s);var v=a(0),i=Object(v.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"蚂蚁金服面试题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#蚂蚁金服面试题"}},[t._v("#")]),t._v(" 蚂蚁金服面试题")]),t._v(" "),a("Badge",{attrs:{text:"高级JAVA",type:"primary"}}),t._v(" "),a("h2",{attrs:{id:"jvm数据存储模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jvm数据存储模型"}},[t._v("#")]),t._v(" JVM数据存储模型 "),a("Badge",{attrs:{text:"一面",type:"warning"}})],1),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")]),t._v(" "),a("blockquote",[a("p",[t._v("JVM数据存储模型")])]),t._v(" "),a("ul",[a("li",[t._v("分为程序计数器 、 Java 虚拟机栈 、本地方法栈、Java 堆、方法区、元数据区。")])]),t._v(" "),a("blockquote",[a("p",[t._v("新生代、年老代的构造")])]),t._v(" "),a("ul",[a("li",[t._v("新生代分为Eden、From Survivor、To Survivor，内部空间占比是8:1:1，在堆中占比是1:3；老年代在堆中占比是2:3。")])])]),t._v(" "),a("h2",{attrs:{id:"谈谈java中的-gc算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#谈谈java中的-gc算法"}},[t._v("#")]),t._v(" 谈谈Java中的 GC算法")]),t._v(" "),a("blockquote",[a("p",[t._v("什么时候会触发Minor GC，什么时候会触发Full GC")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")]),t._v(" "),a("ul",[a("li",[t._v("Minor GC，也叫新生代GC，指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。\n"),a("ul",[a("li",[t._v("虚拟机在进行minorGC之前会判断老年代最大的可用连续空间是否大于新生代的所有对象总空间")])])]),t._v(" "),a("li",[t._v("Full GC，指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC。\n"),a("ul",[a("li",[t._v("晋升进入老年代的对象大小大于老年代的可用内存，这个时候会触发Full GC。")]),t._v(" "),a("li",[t._v("System.gc()方法的调用。")]),t._v(" "),a("li",[t._v("Metaspace区内存达到阈值。")]),t._v(" "),a("li",[t._v("堆中产生大对象超过阈值。")])])])])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("总结")]),t._v(" "),a("blockquote",[a("p",[t._v("可以发现其实堆内存的Full GC一般都是两个原因引起的，要么是老年代内存过小，要么是老年代连续内存过小。无非是这两点，而元数据区Metaspace引发的Full GC可能是阈值引起的。")])])]),t._v(" "),a("h2",{attrs:{id:"什么对象会从新生代晋升到老年代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么对象会从新生代晋升到老年代"}},[t._v("#")]),t._v(" 什么对象会从新生代晋升到老年代")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("Eden区满时")])]),t._v(" "),a("p",[t._v("Eden区满时，进行Minor GC，当Eden和一个Survivor区中依然存活的对象无法放入到Survivor中，则通过"),a("code",[t._v("分配担保机制")]),t._v("提前转移到老年代中。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("大对象直接进入年老代")])]),t._v(" "),a("p",[t._v("大对象即需要大量连续内存空间的Java对象，如长字符串及数组。经常出现大对象导致内存还有不少空间时就提前触发垃圾收集以获取足够的连续空间来安置他们。设置"),a("code",[t._v("-XX：PretenureSizeThreshold")]),t._v("参数，即对象的大小大于此值, 就会绕过新生代, 直接在老年代分配, 此参数只对Serial及ParNew两款收集器有效。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("长期存活的对象将进入年老代")])]),t._v(" "),a("p",[t._v("虚拟机给每个对象定义了一个对象年龄计数器，在对象在Eden创建并经过第一次Minor GC后仍然存活，并能被Suivivor容纳的话，将会被移动到Survivor空间，并对象年龄设置为1。每经历过Minor GC，年龄就增加1岁，当到一定程度（默认15岁，可以通过参数"),a("code",[t._v("-XXMaxTenuringThreshold")]),t._v("设置），就将会晋升年老代。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("空间分配超负荷")])]),t._v(" "),a("p",[t._v("虚拟机并不总是要求对象的年龄必须达到"),a("code",[t._v("MaxTenuringThreshold")]),t._v("才能晋升到老年代，如果在Survivor区中相同年龄（设年龄为age）的对象的所有大小之和超过Survivor空间的一半，年龄大于或等于该年龄（age）的对象就可以直接进入老年代，无需等到"),a("code",[t._v("MaxTenuringThreshold")]),t._v("中要求的年龄。")])])])]),t._v(" "),a("h2",{attrs:{id:"gc可达性分析中哪些算是gc-root"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gc可达性分析中哪些算是gc-root"}},[t._v("#")]),t._v(" GC可达性分析中哪些算是GC ROOT")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")]),t._v(" "),a("ul",[a("li",[t._v("虚拟机栈(栈帧中的本地变量)中的引用的对象。")]),t._v(" "),a("li",[t._v("本地方法栈中JNI本地方法的引用对象。")]),t._v(" "),a("li",[t._v("方法区中静态变量引用的对象。")]),t._v(" "),a("li",[t._v("方法区中常量引用的对象。")]),t._v(" "),a("li",[t._v("活着的线程，包含处于等待或阻塞的线程。")])])]),t._v(" "),a("h2",{attrs:{id:"jvm参数调优，使用过的调优工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jvm参数调优，使用过的调优工具"}},[t._v("#")]),t._v(" JVM参数调优，使用过的调优工具")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")]),t._v(" "),a("blockquote",[a("p",[t._v("Xss，设置每个线程的堆栈大小。-Xmx和-Xms设置堆的大小，互不影响。")])]),t._v(" "),a("ul",[a("li",[t._v("Jps，虚拟机进程状况工具。")]),t._v(" "),a("li",[t._v("Jmap，Java内存印象工具。")]),t._v(" "),a("li",[t._v("Jstat，虚拟机统计信息监视工具。")]),t._v(" "),a("li",[t._v("Jstack，Java堆栈跟踪工具。")])])]),t._v(" "),a("h2",{attrs:{id:"java-有什么锁类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-有什么锁类型"}},[t._v("#")]),t._v(" Java 有什么锁类型")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")]),t._v(" "),a("ul",[a("li",[t._v("偏向锁")]),t._v(" "),a("li",[t._v("轻量级锁")]),t._v(" "),a("li",[t._v("重量级所")]),t._v(" "),a("li",[t._v("公平锁")]),t._v(" "),a("li",[t._v("非公平锁")]),t._v(" "),a("li",[t._v("饥饿锁")]),t._v(" "),a("li",[t._v("活锁")])])]),t._v(" "),a("h2",{attrs:{id:"描述下线程池的处理流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#描述下线程池的处理流程"}},[t._v("#")]),t._v(" 描述下线程池的处理流程")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"类加载机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类加载机制"}},[t._v("#")]),t._v(" 类加载机制")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")]),t._v(" "),a("blockquote",[a("p",[t._v("一个类加载到虚拟机中一共有几个步骤，这些步骤的顺序哪些是固定的，哪些是不固定的，为什么不固定")])])]),t._v(" "),a("h2",{attrs:{id:"concurrenthashmap怎么实现的线程安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap怎么实现的线程安全"}},[t._v("#")]),t._v(" ConcurrentHashMap怎么实现的线程安全")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")]),t._v(" "),a("p",[t._v("采用Node + CAS + Synchronized来保证并发安全进行实现。")])]),t._v(" "),a("h2",{attrs:{id:"volatile关键字特性以及实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volatile关键字特性以及实现原理"}},[t._v("#")]),t._v(" Volatile关键字特性以及实现原理")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")]),t._v(" "),a("p",[t._v("在JVM底层volatile是采用“内存屏障”来实现的。观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令，lock前缀指令实际上相当于一个内存屏障（也成内存栅栏），内存屏障会提供3个功能：")]),t._v(" "),a("p",[t._v("它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；即在执行到内存屏障这句指令时，在它前面的操作已经全部完成；\n它会强制将对缓存的修改操作立即写入主存；\n如果是写操作，它会导致其他CPU中对应的缓存行无效。")])]),t._v(" "),a("h2",{attrs:{id:"并发容器有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发容器有哪些"}},[t._v("#")]),t._v(" 并发容器有哪些")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")]),t._v(" "),a("ul",[a("li",[t._v("ConcurrentHashMap")]),t._v(" "),a("li",[t._v("CountSylDownLanch")]),t._v(" "),a("li",[t._v("CyclicBarrier")]),t._v(" "),a("li",[t._v("Semaphore")])])]),t._v(" "),a("h2",{attrs:{id:"并发容器和同步容器的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#并发容器和同步容器的区别"}},[t._v("#")]),t._v(" 并发容器和同步容器的区别")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")]),t._v(" "),a("p",[t._v("ConcurrentHashMap和HashTable角度")])]),t._v(" "),a("h2",{attrs:{id:"sql语句的优化和注意的事项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql语句的优化和注意的事项"}},[t._v("#")]),t._v(" SQL语句的优化和注意的事项 "),a("Badge",{attrs:{text:"二面",type:"warning"}})],1),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"哪些库或者框架用到nio"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哪些库或者框架用到nio"}},[t._v("#")]),t._v(" 哪些库或者框架用到NIO")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")]),t._v(" "),a("p",[t._v("JDK1.4中就已经加入了NIO模式， JDK1.7 提供了全新的异步NIO模式，涉及的类统一在java.nio包下。\n其中Netty (JBOSS提供的一个Java开源框架NIO框架)对Java的NIO模式进行了封装，方便调用，NIO目前很多框架都用到，比如：")]),t._v(" "),a("ul",[a("li",[t._v("xxl-job")]),t._v(" "),a("li",[t._v("RocketMQ")]),t._v(" "),a("li",[t._v("Dubbo")]),t._v(" "),a("li",[t._v("Kafka SocketServer")]),t._v(" "),a("li",[t._v("等主流的分布式框架都离不开NIO")])])]),t._v(" "),a("h2",{attrs:{id:"spring-都有哪几种注入方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-都有哪几种注入方式"}},[t._v("#")]),t._v(" Spring 都有哪几种注入方式")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"spring-ioc的实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc的实现原理"}},[t._v("#")]),t._v(" Spring IOC的实现原理")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"如何定位一个慢查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何定位一个慢查询"}},[t._v("#")]),t._v(" 如何定位一个慢查询")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"聚集索引和非聚集索引知道吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚集索引和非聚集索引知道吗"}},[t._v("#")]),t._v(" 聚集索引和非聚集索引知道吗")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"聚集索引和非聚集索引的使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#聚集索引和非聚集索引的使用场景"}},[t._v("#")]),t._v(" 聚集索引和非聚集索引的使用场景")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"nosql引擎用的什么存储结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nosql引擎用的什么存储结构"}},[t._v("#")]),t._v(" Nosql引擎用的什么存储结构")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"关系型数据库和nosql各自的优劣点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关系型数据库和nosql各自的优劣点"}},[t._v("#")]),t._v(" 关系型数据库和NoSQL各自的优劣点")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"微服务架构下，怎么保证事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构下，怎么保证事务"}},[t._v("#")]),t._v(" 微服务架构下，怎么保证事务")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"分布式一致性协议raft和paxos"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式一致性协议raft和paxos"}},[t._v("#")]),t._v(" 分布式一致性协议raft和paxos")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"zookeeper中的zab协议，选主算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper中的zab协议，选主算法"}},[t._v("#")]),t._v(" Zookeeper中的ZAB协议，选主算法")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"自我介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自我介绍"}},[t._v("#")]),t._v(" 自我介绍 "),a("Badge",{attrs:{text:"三面",type:"warning"}})],1),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"参与的并发项目，从设计到部署，按照流程讲一遍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参与的并发项目，从设计到部署，按照流程讲一遍"}},[t._v("#")]),t._v(" 参与的并发项目，从设计到部署，按照流程讲一遍")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"项目相关你用过redis，用在什么场景，怎么使用的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目相关你用过redis，用在什么场景，怎么使用的"}},[t._v("#")]),t._v(" 项目相关你用过redis，用在什么场景，怎么使用的")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"mysql同步机制原理，几种同步方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql同步机制原理，几种同步方法"}},[t._v("#")]),t._v(" mysql同步机制原理，几种同步方法")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"数据库主从同步如何实现，事务如何实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库主从同步如何实现，事务如何实现"}},[t._v("#")]),t._v(" 数据库主从同步如何实现，事务如何实现")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"谈谈你对soa和微服务的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对soa和微服务的理解"}},[t._v("#")]),t._v(" 谈谈你对SOA和微服务的理解")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"分布式架构从应用层面涉及到的调整和挑战"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式架构从应用层面涉及到的调整和挑战"}},[t._v("#")]),t._v(" 分布式架构从应用层面涉及到的调整和挑战")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"阿里系中间件-rocketmq-及原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阿里系中间件-rocketmq-及原理"}},[t._v("#")]),t._v(" 阿里系中间件 RocketMQ 及原理")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"rocketmq与kafka有什么异同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rocketmq与kafka有什么异同"}},[t._v("#")]),t._v(" RocketMQ与kafka有什么异同")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"举例谈谈中间件的实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例谈谈中间件的实现原理"}},[t._v("#")]),t._v(" 举例谈谈中间件的实现原理")]),t._v(" "),a("blockquote",[a("p",[t._v("在阿里有了解过什么中间件吗？实现原理？与其他开源消息队列有什么特点")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"为什么选择换公司"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么选择换公司"}},[t._v("#")]),t._v(" 为什么选择换公司")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"三年到五年的职业规划"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三年到五年的职业规划"}},[t._v("#")]),t._v(" 三年到五年的职业规划")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])]),t._v(" "),a("h2",{attrs:{id:"你有想问我的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#你有想问我的"}},[t._v("#")]),t._v(" 你有想问我的")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("参考答案")])])],1)}),[],!1,null,null,null);s.default=i.exports}}]);