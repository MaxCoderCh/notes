(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{171:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"六-bean的实例化-注解支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六-bean的实例化-注解支持"}},[t._v("#")]),t._v(" [六] Bean的实例化-注解支持")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("注解支持")]),t._v(" "),a("p",[t._v("注解的实现过程，其实就是Spring Bean的自动装配过程，存在于Srping bean的生命周期中，Spirng 中有三种bean的装配机制：")]),t._v(" "),a("ul",[a("li",[t._v("1、xml进行显示配置")]),t._v(" "),a("li",[t._v("2、java中进行显示配置")]),t._v(" "),a("li",[t._v("3、隐式的bean发现机制和自动装配\n所以要想了解Spring中的注解原理，首先需要了解注解的装配过程。")])])]),t._v(" "),a("h2",{attrs:{id:"注解处理的入口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注解处理的入口"}},[t._v("#")]),t._v(" 注解处理的入口")]),t._v(" "),a("blockquote",[a("p",[t._v("Spring初始化过程中，调用注解处理的几个主要埋点")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("│ ├─")]),t._v(" refresh")]),t._v(" "),a("li",[a("code",[t._v("│ │ ├─")]),t._v(" prepareRefresh")]),t._v(" "),a("li",[a("code",[t._v("│ │ ├─")]),t._v(" "),a("strong",[t._v("obtainFreshBeanFactory")]),t._v(" "),a("Badge",{attrs:{text:" XML文件解析，component-scan属性解析",type:"danger"}})],1),t._v(" "),a("li",[a("code",[t._v("│ │ ├─")]),t._v(" prepareBeanFactory")]),t._v(" "),a("li",[a("code",[t._v("│ │ ├─")]),t._v(" postProcessBeanFactory")]),t._v(" "),a("li",[a("code",[t._v("│ │ ├─")]),t._v(" invokeBeanFactoryPostProcessors")]),t._v(" "),a("li",[a("code",[t._v("│ │ ├─")]),t._v(" registerBeanPostProcessors "),a("Badge",{attrs:{text:" 实例化注解处理器",type:"danger"}})],1),t._v(" "),a("li",[a("code",[t._v("│ │ ├─")]),t._v(" initMessageSource")]),t._v(" "),a("li",[a("code",[t._v("│ │ ├─")]),t._v(" initApplicationEventMulticaster")]),t._v(" "),a("li",[a("code",[t._v("│ │ ├─")]),t._v(" registerListeners")]),t._v(" "),a("li",[a("code",[t._v("│ │ ├─")]),t._v(" finishBeanFactoryInitialization")]),t._v(" "),a("li",[a("code",[t._v("│ │ ├─")]),t._v(" getObjectForBeanInstance")]),t._v(" "),a("li",[a("code",[t._v("│ │ ├─")]),t._v(" getBean")]),t._v(" "),a("li",[a("code",[t._v("│ │ │ ├─")]),t._v(" createBean")]),t._v(" "),a("li",[a("code",[t._v("│ │ │ │ ├─")]),t._v(" doCreateBean")]),t._v(" "),a("li",[a("code",[t._v("│ │ │ │ │ ├─")]),t._v(" createBeanInstance")]),t._v(" "),a("li",[a("code",[t._v("│ │ │ │ │ │ ├─")]),t._v(" "),a("strong",[t._v("determineConstructorsFromBeanPostProcessors")]),t._v(" "),a("Badge",{attrs:{text:" 解析构造函数是否有@Autowired",type:"danger"}})],1),t._v(" "),a("li",[a("code",[t._v("│ │ │ │ │ ├─")]),t._v(" "),a("strong",[t._v("applyMergedBeanDefinitionPostProcessors")]),t._v(" "),a("Badge",{attrs:{text:" 注解的搜集和装配过程",type:"danger"}})],1),t._v(" "),a("li",[a("code",[t._v("│ │ │ │ │ ├─")]),t._v(" earlySingletonExposure")]),t._v(" "),a("li",[a("code",[t._v("│ │ │ │ │ ├─")]),t._v(" addSingletonFactory")]),t._v(" "),a("li",[a("code",[t._v("│ │ │ │ │ ├─")]),t._v(" populateBean")]),t._v(" "),a("li",[a("code",[t._v("│ │ │ │ │ │ ├─")]),t._v(" postProcessProperties  "),a("Badge",{attrs:{text:" 根据收集到的注解进行反射调用",type:"danger"}})],1),t._v(" "),a("li",[a("code",[t._v("│ │ │ │ │ │ │ ├─")]),t._v(" "),a("strong",[t._v("AutowiredFieldElement")]),t._v("."),a("strong",[t._v("inject")]),t._v(" "),a("Badge",{attrs:{text:"解析有@Autowired注解域的注入",type:"danger"}})],1),t._v(" "),a("li",[a("code",[t._v("│ │ │ │ │ │ │ ├─")]),t._v(" "),a("strong",[t._v("AutowiredMethodElement")]),t._v("."),a("strong",[t._v("inject")]),t._v(" "),a("Badge",{attrs:{text:"解析有@Autowired注解方法的注入",type:"danger"}})],1),t._v(" "),a("li",[a("code",[t._v("│ │ │ │ │ ├─")]),t._v("  initializeBean")]),t._v(" "),a("li",[a("code",[t._v("│ │ │ │ │ │ ├─")]),t._v(" "),a("strong",[t._v("applyBeanPostProcessorsBeforeInitialization")]),t._v(" "),a("Badge",{attrs:{text:"解析处理@PostConstruct",type:"danger"}})],1),t._v(" "),a("li",[a("code",[t._v("│ │ │ │ │ │ ├─")]),t._v("  invokeInitMethods")]),t._v(" "),a("li",[a("code",[t._v("│ │ │ │ │ │ ├─")]),t._v(" "),a("strong",[t._v("applyBeanPostProcessorsAfterInitialization")]),t._v(" "),a("Badge",{attrs:{text:" AOP的入口",type:"danger"}})],1),t._v(" "),a("li",[a("code",[t._v("│ │ │ ├─")]),t._v(" afterSingletonCreation")]),t._v(" "),a("li",[a("code",[t._v("│ │ │ └─")]),t._v(" addSingleton")])]),t._v(" "),a("h2",{attrs:{id:"注解的装配与收集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注解的装配与收集"}},[t._v("#")]),t._v(" 注解的装配与收集")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("装配过程")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("1、根据xml文件"),a("code",[t._v("<context:component-scan>")]),t._v("标签中的类路径或者@ComponentScan注解中的类路径进行扫描解析，将包含@Component和元注解为@Component的注解@Controller、@Service、@Repository还有支持"),a("code",[t._v("Java EE 6的@link javax.annotation.ManagedBean")]),t._v("和"),a("code",[t._v("JSR-330的 @link javax.inject.Named")]),t._v("的bean封装到BeanDefinition对象后，最后注册到"),a("code",[t._v("BeanFactory")]),t._v("中。")])]),t._v(" "),a("li",[a("p",[t._v("2、注册注解后置处理器，主要由"),a("code",[t._v("BeanPostProcessor")]),t._v("来负责解析，具体包括：")]),t._v(" "),a("ul",[a("li",[t._v("ConfigurationClassPostProcessor： 注册@Configuration处理器。")]),t._v(" "),a("li",[a("code",[t._v("AutowiredAnnotationBeanPostProcessor")]),t._v("：注册@Autowired、@Value、@Inject(JSR-330)处理器。")]),t._v(" "),a("li",[a("code",[t._v("RequiredAnnotationBeanPostProcessor")]),t._v("：注册@Required处理器。")]),t._v(" "),a("li",[a("code",[t._v("PersistenceAnnotationBeanPostProcessor")]),t._v("：支持Jpa的条件下，处理Jpa相关注解 。")]),t._v(" "),a("li",[a("code",[t._v("EventListenerMethodProcessor")]),t._v("：注册@EventListener处理器。")]),t._v(" "),a("li",[a("code",[t._v("InitDestroyAnnotationBeanPostProcessor")]),t._v("：处理@PostConstruct、@PreDestroy 注解的解析。")]),t._v(" "),a("li",[a("code",[t._v("CommonAnnotationBeanPostProcessor")]),t._v("：在支持JSR-250条件下注册JDK中javax.annotation包中注解处理器(@PostConstruct、@PreDestroy、@Resource、@Resources、@Generated)。")])])])])]),t._v(" "),a("div",{staticClass:"warning custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("注解后置处理器的收集过程")]),t._v(" "),a("p",[a("code",[t._v("@Autowired")]),t._v("和"),a("code",[t._v("@Resource")]),t._v("注解的收集过程基本一致，流程如下：")]),t._v(" "),a("ul",[a("li",[t._v("1、看缓存里面有没有 InjectionMetadata对象")]),t._v(" "),a("li",[t._v("2、从类中获取所有 Field 对象，循环  Field 对象，判断  Field 有没有@Resource注解，\n如果有注解封装成 ResourceElement对象")]),t._v(" "),a("li",[t._v("3、从类中获取所有 Method对象，循环  Method对象，判断 Method有没有@Resource\n注解，如果有注解封装成 ResourceElement对象")]),t._v(" "),a("li",[t._v("4、然后把两个 Field 和  Method封装的对象集合封装到 InjectionMetadata对象中")]),t._v(" "),a("li",[t._v("5、最终把返回的 InjectionMetadata 对象存到ConcurrentHashMap 缓存中。")])])]),t._v(" "),a("h2",{attrs:{id:"常用注解的处理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用注解的处理器"}},[t._v("#")]),t._v(" 常用注解的处理器")]),t._v(" "),a("h3",{attrs:{id:"commonannotationbeanpostprocessor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commonannotationbeanpostprocessor"}},[t._v("#")]),t._v(" CommonAnnotationBeanPostProcessor")]),t._v(" "),a("blockquote",[a("p",[t._v("概述")])]),t._v(" "),a("p",[a("code",[t._v("CommonAnnotationBeanPostProcessor")]),t._v("支持了@PostConstruct、@PreDestroy、@Resource等注解的解析工作，但是真正对@PostConstruct、@PreDestroy两个注解的解析是由其父类"),a("code",[t._v("InitDestroyAnnotationBeanPostProcessor")]),t._v("来完成的。")]),t._v(" "),a("blockquote",[a("p",[t._v("源码")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// CommonAnnotationBeanPostProcessor的构造函数，支持了@PostConstruct、@PreDestroy")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CommonAnnotationBeanPostProcessor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ordered")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LOWEST_PRECEDENCE "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInitAnnotationType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PostConstruct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setDestroyAnnotationType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PreDestroy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ignoreResourceType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"javax.xml.ws.WebServiceContext"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessMergedBeanDefinition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RootBeanDefinition")]),t._v(" beanDefinition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" beanType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//扫描@PostConstruct @PreDestroy")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessMergedBeanDefinition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanDefinition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" beanType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//扫描@Resource,扫描属性和方法上面是否有@Resource注解，如果有则收集起来封装成对象")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InjectionMetadata")]),t._v(" metadata "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("findResourceMetadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" beanType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tmetadata"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkConfigMembers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("beanDefinition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"autowiredannotationbeanpostprocessor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#autowiredannotationbeanpostprocessor"}},[t._v("#")]),t._v(" AutowiredAnnotationBeanPostProcessor")]),t._v(" "),a("blockquote",[a("p",[t._v("概述")])]),t._v(" "),a("p",[t._v("AutowiredAnnotationBeanPostProcessor后置处理器，主要处理@Autowired的解析。")]),t._v(" "),a("blockquote",[a("p",[t._v("类图")])]),t._v(" "),a("p",[a("a",{attrs:{"data-fancybox":"",title:"AutowiredAnnotationBeanPostProcessor类图",href:"/assets/image-20200115210309376.png"}},[a("img",{attrs:{src:t.$withBase("/assets/image-20200115210309376.png"),alt:""}})])]),t._v(" "),a("ul",[a("li",[t._v("PriorityOrdered：确认 AutowiredAnnotationBeanPostProcessor 后置处理器的执行优先级")]),t._v(" "),a("li",[t._v("BeanFactoryAware：使得AutowiredAnnotationBeanPostProcessor 可以直接通过BeanFactory获取容器中的Bean")]),t._v(" "),a("li",[t._v("BeanPostProcessor：在 Bean 初始化前后执行的后置处理器")]),t._v(" "),a("li",[t._v("InstantiationAwareBeanPostProcessor：在 Bean 实例化前后和Bean设置属性值时执行的后置处理器")]),t._v(" "),a("li",[t._v("SmartInstantiationAwareBeanPostProcessor：智能实例化Bean的后处理器，如预测Bean的类型和确认Bean的构造函数等。")]),t._v(" "),a("li",[t._v("MergedBeanDefinitionPostProcessor：合并Bean的定义信息。")])]),t._v(" "),a("blockquote",[a("p",[t._v("Spring 注解的装配收集源码")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n *  TODO : 注解装配过程的核心方法，\n *  BeanPostProcessor接口的典型运用，这里要理解这个接口\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("applyMergedBeanDefinitionPostProcessors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RootBeanDefinition")]),t._v(" mbd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" beanType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanPostProcessor")]),t._v(" bp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBeanPostProcessors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("bp "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MergedBeanDefinitionPostProcessor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MergedBeanDefinitionPostProcessor")]),t._v(" bdp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MergedBeanDefinitionPostProcessor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" bp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t\tbdp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessMergedBeanDefinition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mbd"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" beanType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" beanName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);