(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{187:function(t,n,a){"use strict";a.r(n);var e=a(0),s=Object(e.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"附：spring-中核心方法简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#附：spring-中核心方法简介"}},[t._v("#")]),t._v(" 附：Spring 中核心方法简介")]),t._v(" "),a("h2",{attrs:{id:"beandefinition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beandefinition"}},[t._v("#")]),t._v(" BeanDefinition")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("简介")]),t._v(" "),a("p",[a("code",[t._v("BeanDefinition")]),t._v("在 spring 中贯穿始终，spring 要根据 BeanDefinition 对象来实例化 bean，只要把解析的标签，扫描的注解类封装成 BeanDefinition 对象，spring 才能实例化 bean。Bean的创建工厂BeanFactory有个默认实现类DefaultListableBeanFactory，内部有个存放所有注入bean对象信息的Map。")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("BeanDefinition")]),t._v("存储在Map中，key为beanName，value为BeanDefinition")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanDefinition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" beanDefinitionMap "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcurrentHashMap")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("256")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"beandefinition的uml图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beandefinition的uml图"}},[t._v("#")]),t._v(" BeanDefinition的UML图")]),t._v(" "),a("p",[a("a",{attrs:{"data-fancybox":"",title:"BeanDefinition结构图",href:"/assets/beandefinition.png"}},[a("img",{attrs:{src:t.$withBase("/assets/beandefinition.png"),alt:""}})])]),t._v(" "),a("blockquote",[a("p",[t._v("BeanDefinition 的三个实现类")])]),t._v(" "),a("ul",[a("li",[t._v("ChildBeanDefinition")]),t._v(" "),a("li",[t._v("GenericBeanDefinition")]),t._v(" "),a("li",[t._v("RootBeanDefinition")])]),t._v(" "),a("div",{staticClass:"danger custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("从 spring 2.5 开始，提供了一个更好的注册 bean definition 类"),a("code",[t._v("GenericBeanDefinition")]),t._v("，它支持动态定义父依赖，方法是GenericBeanDefinition.setParentName(java.lang.String)，"),a("code",[t._v("GenericBeanDefinition")]),t._v("可以有效的替代"),a("code",[t._v("ChildBeanDefinition")]),t._v("的绝大分部使用场合。")])]),t._v(" "),a("h3",{attrs:{id:"beandefinition的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beandefinition的属性"}},[t._v("#")]),t._v(" BeanDefinition的属性")]),t._v(" "),a("p",[a("a",{attrs:{"data-fancybox":"",title:"BeanDefinition属性",href:"/assets/image-20200107200232112.png"}},[a("img",{attrs:{src:t.$withBase("/assets/image-20200107200232112.png"),alt:""}})])]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("id")]),t._v("：Bean 的唯一标识名。它必须是合法的 XMLID，在整个XML 文档中唯一。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("name")]),t._v("：用来为 id 创建一个或多个别名。它可以是任意的字母符合。多个别名之间用逗号或空格分开。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("class")]),t._v("： 用来定义类的全限定名（包名＋类名）。只有子类 Bean 不用定义该属性。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("parent")]),t._v("：子类Bean 定义它所引用它的父类 Bean。这时前面的 class 属性失效。子类 Bean 会继承父类 Bean 的所有属性，子类 Bean 也可以覆盖父类 Bean 的属性。注意：子类 Bean 和父类 Bean 是同一个 Java 类。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v('abstract（默认为"false"）')]),t._v("：用来定义 Bean 是否为抽象 Bean。它表示这个 Bean 将不会被实例化，一般用于父类 Bean，因为父类 Bean 主要是供子类 Bean 继承使用。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v('lazy-init（默认为"default"）')]),t._v("：用来定义这个 Bean 是否实现懒初始化。如果为"),a("code",[t._v("true")]),t._v("，它将在 BeanFactory 启动时初始化所有的 SingletonBean。反之，如果为"),a("code",[t._v("false")]),t._v(",它只在 Bean 请求时才开始创建 SingletonBean。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v('autowire（自动装配，默认为"default"）')]),t._v("：它定义了Bean 的自动装载方式。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("no")]),t._v("： 不使用自动装配功能。")]),t._v(" "),a("li",[a("code",[t._v("byName")]),t._v("： 通过Bean 的属性名实现自动装配。")]),t._v(" "),a("li",[a("code",[t._v("byType")]),t._v("：通过 Bean 的类型实现自动装配。")]),t._v(" "),a("li",[a("code",[t._v("constructor")]),t._v("：类似于 byType，但它是用于构造函数的参数的自动组装。")]),t._v(" "),a("li",[a("code",[t._v("autodetect")]),t._v("：通过Bean 类的反省机制（introspection）决定是使用"),a("code",[t._v("constructor")]),t._v("还是使用"),a("code",[t._v("byType")]),t._v("。")])])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("depends-on（依赖对象）")]),t._v("：这个 Bean 在初始化时依赖的对象，这个对象会在这个Bean 初始化之前创建。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("init-method")]),t._v("：用来定义 Bean 的初始化方法，它会在Bean 组装之后调用。它必须是一个无参数的方法。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("destroy-method")]),t._v("：用来定义 Bean 的销毁方法，它在 BeanFactory 关闭时调用。同样，它也必须是一个无参数的方法。它只能应用于 singletonBean。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("factory-method")]),t._v("：定义创建该Bean 对象的工厂方法。它用于下面的"),a("code",[t._v("factory-bean")]),t._v("，表示这个 Bean 是通过工厂方法创建。此时，“class”属性失效。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("factory-bean")]),t._v("： 定义创建该 Bean 对象的工厂类。如果使用了"),a("code",[t._v("factory-bean")]),t._v("则"),a("code",[t._v("class")]),t._v("属性失效。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("autowire-candidate")]),t._v("：采用 xml 格式配置 bean 时，将"),a("code",[t._v("<bean/>")]),t._v("元素的 autowire-candidate 属性设置为 false，这样容器在查找自动装配对象时，将不考虑该 bean，即它不会被考虑作为其它 bean 自动装配的候选者，但是该 bean 本身还是可以使用自动装配来注入其它 bean 的。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("MutablePropertyValues")]),t._v("：用于封装"),a("code",[t._v("<property>")]),t._v("标签的信息，其实类里面就是有一个list，list 里面是 PropertyValue 对象，PropertyValue 就是一个name 和 value 属性，用于封装"),a("code",[t._v("<property>")]),t._v("标签的名称和值信息")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("ConstructorArgumentValues")]),t._v("：用于封装"),a("code",[t._v("<constructor-arg>")]),t._v("标签的信息，其实类里面就是有一个 map，map 中用构造函数的参数顺序作为key，值作为 value 存储到 map 中")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("MethodOverrides")]),t._v("：用于封装 lookup-method 和 replaced-method 标签的信息，同样的类里面有一个 Set 对象添加 LookupOverride 对象和 ReplaceOverride 对象")])])]),t._v(" "),a("h2",{attrs:{id:"childbeandefinition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#childbeandefinition"}},[t._v("#")]),t._v(" ChildBeanDefinition")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("简介")]),t._v(" "),a("p",[a("code",[t._v("ChildBeanDefinition")]),t._v("是一种 bean definition，它可以继承它父类的设置，即ChildBeanDefinition 对 RootBeanDefinition 有一定的依赖关系。ChildBeanDefinition 从父类继承构造参数值，属性值并可以重写父类的方法，同时也可以增加新的属性或者方法。(类同于 java 类的继承关系)。若指定初始化方法，销毁方法或者静态工厂方法，ChildBeanDefinition 将重写相应父类的设置。depends on，autowire mode，dependency check，sigleton，lazy init 一般由子类自行设定。")])]),t._v(" "),a("h2",{attrs:{id:"genericbeandefinition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#genericbeandefinition"}},[t._v("#")]),t._v(" GenericBeanDefinition")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("简介")]),t._v(" "),a("p",[a("code",[t._v("GenericBeanDefinition")]),t._v("是一站式的标准 bean definition，除了具有指定类、可选的构造参数值和属性参数这些其它 bean definition 一样的特性外，它还具有通过 parenetName 属性来灵活设置 parent bean definition。")]),t._v(" "),a("p",[t._v("通常， "),a("code",[t._v("GenericBeanDefinition")]),t._v("用来注册用户可见的 bean definition(可见的bean definition 意味着可以在该类"),a("code",[t._v("BeanDefinition")]),t._v("上定义post-processor 来对bean 进行操作，甚至为配置 parent name 做扩展准备)。RootBeanDefinition / ChildBeanDefinition 用来预定义具有 parent/child 关系的 bean definition。")])]),t._v(" "),a("h2",{attrs:{id:"rootbeandefinition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rootbeandefinition"}},[t._v("#")]),t._v(" RootBeanDefinition")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("简介")]),t._v(" "),a("p",[t._v("一个"),a("code",[t._v("RootBeanDefinition")]),t._v(" 定义表明它是一个可合并的 bean definition：即在spring beanFactory 运行期间，可以返回一个特定的 bean。"),a("code",[t._v("RootBeanDefinition")]),t._v("可以作为一个重要的通用的 bean definition 视图。")]),t._v(" "),a("p",[a("code",[t._v("RootBeanDefinition")]),t._v("用来在配置阶段进行注册 bean definition。然后，从 spring2.5 后，编写注册 bean definition 有了更好的的方法：GenericBeanDefinition。GenericBeanDefinition 支持动态定义父类依赖，而非硬编码作为 root bean definition。")])]),t._v(" "),a("h2",{attrs:{id:"beandefinitionbuilder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beandefinitionbuilder"}},[t._v("#")]),t._v(" BeanDefinitionBuilder")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("简介")]),t._v(" "),a("blockquote",[a("p",[t._v("BeanDefinitionBuilder是Builder模式的应用。通过这个类我们可以方便的构建BeanDefinition的实例对象。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyBeanDefinitionRegistryPostProcessor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanDefinitionRegistryPostProcessor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessBeanDefinitionRegistry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanDefinitionRegistry")]),t._v(" registry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeansException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanDefinition")]),t._v(" beanDefinition "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanDefinitionBuilder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("genericBeanDefinition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OrderService")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这里的属性名是根据setter方法")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addPropertyReference")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dao"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"orderDao"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInitMethodName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"init"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setScope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeanDefinition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SCOPE_SINGLETON"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBeanDefinition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        registry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("registerBeanDefinition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"orderService"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" beanDefinition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("postProcessBeanFactory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConfigurableListableBeanFactory")]),t._v(" beanFactory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BeansException")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//do nothing")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("h2",{attrs:{id:"invokebeanfactorypostprocessors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#invokebeanfactorypostprocessors"}},[t._v("#")]),t._v(" invokeBeanFactoryPostProcessors")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("简介")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("BeanDefinitionRegistryPostProcessor")]),t._v(" "),a("ul",[a("li",[t._v("实现PriorityOrdered接口")]),t._v(" "),a("li",[t._v("实现Ordered接口")]),t._v(" "),a("li",[t._v("两个接口都没实现")]),t._v(" "),a("li",[t._v("调用BeanFactoryPostProcessor")])])]),t._v(" "),a("li",[a("p",[t._v("BeanFactoryPostProcessor")]),t._v(" "),a("ul",[a("li",[t._v("实现PriorityOrdered接口")]),t._v(" "),a("li",[t._v("实现Ordered接口")]),t._v(" "),a("li",[t._v("两个接口都没实现")])])])])]),t._v(" "),a("h2",{attrs:{id:"registerbeanpostprocessors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#registerbeanpostprocessors"}},[t._v("#")]),t._v(" registerBeanPostProcessors")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("简介")]),t._v(" "),a("blockquote",[a("p",[t._v("将BeanPostProcessor类型接口注册到BeanFactory中")])]),t._v(" "),a("ul",[a("li",[t._v("实现PriorityOrdered接口")]),t._v(" "),a("li",[t._v("实现Ordered接口")]),t._v(" "),a("li",[t._v("两个接口都没实现")]),t._v(" "),a("li",[t._v("MergedBeanDefinitionPostProcessor类型的接口")])]),t._v(" "),a("blockquote",[a("p",[t._v("PS：MergedBeanDefinitionPostProcessor类型的接口是spring内部使用接口")])])]),t._v(" "),a("h2",{attrs:{id:"onrefresh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onrefresh"}},[t._v("#")]),t._v(" onRefresh")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("简介")]),t._v(" "),a("p",[t._v("这个方法是一个很重要的方法，不同的上下文对象对其有不同的实现，在springboot中，就是通过这个方法启动了嵌入式servlet容器。")])]),t._v(" "),a("h2",{attrs:{id:"finishbeanfactoryinitialization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finishbeanfactoryinitialization"}},[t._v("#")]),t._v(" finishBeanFactoryInitialization")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("简介")]),t._v(" "),a("blockquote",[a("p",[t._v("这个方法是spring中比较重要的方法之一，主要作用初始化所有的单例Bean(非延迟加载的)。")])]),t._v(" "),a("ul",[a("li",[t._v("bean实例化过程")]),t._v(" "),a("li",[t._v("ioc")]),t._v(" "),a("li",[t._v("注解支持")]),t._v(" "),a("li",[t._v("BeanPostProcessor的执行")]),t._v(" "),a("li",[t._v("Aop的入口")])])])])}),[],!1,null,null,null);n.default=s.exports}}]);