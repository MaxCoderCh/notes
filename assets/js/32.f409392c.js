(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{208:function(a,e,t){"use strict";t.r(e);var s=t(0),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"docker-操作容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-操作容器"}},[a._v("#")]),a._v(" Docker 操作容器")]),a._v(" "),t("h2",{attrs:{id:"启动容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动容器"}},[a._v("#")]),a._v(" 启动容器")]),a._v(" "),t("p",[a._v("所需要的命令主要为 "),t("code",[a._v("docker run")]),a._v("。例如，下面的命令输出一个 “Hello World”，之后终止容器。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker run ubuntu:16.04 /bin/echo "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Hello world'")]),a._v("\nHello world\n")])])]),t("p",[a._v("当利用 "),t("code",[a._v("docker run")]),a._v(" 来创建容器时，Docker 在后台运行的标准操作包括：")]),a._v(" "),t("ul",[t("li",[a._v("检查本地是否存在指定的镜像，不存在就从公有仓库下载")]),a._v(" "),t("li",[a._v("利用镜像创建并启动一个容器")]),a._v(" "),t("li",[a._v("分配一个文件系统，并在只读的镜像层外面挂载一层可读写层")]),a._v(" "),t("li",[a._v("从宿主主机配置的网桥接口中桥接一个虚拟接口到容器中去")]),a._v(" "),t("li",[a._v("从地址池配置一个 ip 地址给容器")]),a._v(" "),t("li",[a._v("执行用户指定的应用程序")]),a._v(" "),t("li",[a._v("执行完毕后容器被终止")])]),a._v(" "),t("h2",{attrs:{id:"终止容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#终止容器"}},[a._v("#")]),a._v(" 终止容器")]),a._v(" "),t("p",[a._v("可以使用 "),t("code",[a._v("docker container stop")]),a._v(" 来终止一个运行中的容器。此外，当 Docker 容器中指定的应用终结时，容器也自动终止。")]),a._v(" "),t("p",[a._v("例如对于只启动了一个终端的容器，用户通过 "),t("code",[a._v("exit")]),a._v(" 命令或 "),t("code",[a._v("ctrl + d")]),a._v(" 来退出终端时，所创建的容器立刻终止。终止状态的容器可以用 "),t("code",[a._v("docker container ls -a")]),a._v(" 命令看到。例如")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ls")]),a._v(" -a\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 输出如下")]),a._v("\nCONTAINER ID        IMAGE                    COMMAND                CREATED             STATUS                          PORTS               NAMES\nba267838cc1b        ubuntu:14.04             "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/bin/bash"')]),a._v("            "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("30")]),a._v(" minutes ago      Exited "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" About a minute ago                       trusting_newton\n98e5efa7d997        training/webapp:latest   "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"python app.py"')]),a._v("        About an hour ago   Exited "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("34")]),a._v(" minutes ago                           backstabbing_pike\n")])])]),t("h2",{attrs:{id:"启动已终止容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动已终止容器"}},[a._v("#")]),a._v(" 启动已终止容器")]),a._v(" "),t("p",[a._v("处于终止状态的容器，可以通过 "),t("code",[a._v("docker container start")]),a._v(" 命令来重新启动。此外，"),t("code",[a._v("docker container restart")]),a._v(" 命令会将一个运行态的容器终止，然后再重新启动它。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker container start "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID or NAMES"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n")])])]),t("h2",{attrs:{id:"守护态运行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#守护态运行"}},[a._v("#")]),a._v(" 守护态运行")]),a._v(" "),t("p",[a._v("更多的时候，需要让 Docker 在后台运行而不是直接把执行命令的结果输出在当前宿主机下。此时，可以通过添加 "),t("code",[a._v("-d")]),a._v(" 参数来实现。如果不使用 "),t("code",[a._v("-d")]),a._v(" 参数运行容器。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker run ubuntu:16.04 /bin/sh -c "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"while true; do echo hello world; sleep 1; done"')]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 输出如下")]),a._v("\nhello world\nhello world\nhello world\nhello world\n")])])]),t("p",[a._v("容器会把输出的结果 (STDOUT) 打印到宿主机上面，如果使用了 "),t("code",[a._v("-d")]),a._v(" 参数运行容器。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker run -d ubuntu:17.10 /bin/sh -c "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"while true; do echo hello world; sleep 1; done"')]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 输出如下")]),a._v("\n77b2dc01fe0f3f1265df143181e7b9af5e05279a884f4776ee75350ea9d8017a\n")])])]),t("p",[a._v("此时容器会在后台运行并不会把输出的结果 (STDOUT) 打印到宿主机上面(输出结果可以用 "),t("code",[a._v("docker logs")]),a._v(" 查看)。")]),a._v(" "),t("blockquote",[t("p",[t("strong",[a._v("注意：")]),a._v(" 容器是否会长久运行，是和 "),t("code",[a._v("docker run")]),a._v(" 指定的命令有关，和 "),t("code",[a._v("-d")]),a._v(" 参数无关。")])]),a._v(" "),t("h2",{attrs:{id:"容器日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器日志"}},[a._v("#")]),a._v(" 容器日志")]),a._v(" "),t("p",[a._v("要获取容器的输出信息，可以通过 "),t("code",[a._v("docker container logs")]),a._v(" 命令。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker container logs "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("container ID or NAMES"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 输出如下")]),a._v("\nhello world\nhello world\nhello world\n")])])]),t("h2",{attrs:{id:"进入容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进入容器"}},[a._v("#")]),a._v(" 进入容器")]),a._v(" "),t("p",[a._v("在使用 "),t("code",[a._v("-d")]),a._v(" 参数时，容器启动后会进入后台。某些时候需要进入容器进行操作，"),t("code",[a._v("docker exec")]),a._v(" 命令能让我们以交互的方式进入容器。")]),a._v(" "),t("p",[t("code",[a._v("docker exec")]),a._v(" 后边可以跟多个参数，这里主要说明 "),t("code",[a._v("-i")]),a._v(" "),t("code",[a._v("-t")]),a._v(" 参数。只用 "),t("code",[a._v("-i")]),a._v(" 参数时，由于没有分配伪终端，界面没有我们熟悉的 Linux 命令提示符，但命令执行结果仍然可以返回。当 "),t("code",[a._v("-i")]),a._v(" "),t("code",[a._v("-t")]),a._v(" 参数一起使用时，则可以看到我们熟悉的 Linux 命令提示符。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("exec")]),a._v(" -it 69d1 "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("bash")]),a._v("\nroot@69d137adef7a:/"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#")]),a._v("\n")])])]),t("p",[a._v("如果从这个 stdin 中 exit，不会导致容器的停止。更多参数说明请使用 "),t("code",[a._v("docker exec --help")]),a._v(" 查看。")]),a._v(" "),t("h2",{attrs:{id:"删除容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除容器"}},[a._v("#")]),a._v(" 删除容器")]),a._v(" "),t("p",[a._v("可以使用 "),t("code",[a._v("docker container rm")]),a._v(" 来删除一个处于终止状态的容器。例如")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("rm")]),a._v(" trusting_newton\ntrusting_newton\n")])])]),t("p",[a._v("如果要删除一个运行中的容器，可以添加 "),t("code",[a._v("-f")]),a._v(" 参数。Docker 会发送 "),t("code",[a._v("SIGKILL")]),a._v(" 信号给容器。")]),a._v(" "),t("h2",{attrs:{id:"清理所有处于终止状态的容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#清理所有处于终止状态的容器"}},[a._v("#")]),a._v(" 清理所有处于终止状态的容器")]),a._v(" "),t("p",[a._v("用 "),t("code",[a._v("docker container ls -a")]),a._v(" 命令可以查看所有已经创建的包括终止状态的容器，如果数量太多要一个个删除可能会很麻烦，用下面的命令可以清理掉所有处于终止状态的容器。")]),a._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[a._v("docker container prune\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);